name: Build and Push Docker Image

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Workflow to manually rebuild the image for a specific tag'
        required: true

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.skip_build }}
      harbor_secret_set: ${{ steps.check_harbor_secret.outputs.harbor_secret_set }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Check if build should be skipped
        id: skip_check
        run: |
          AUTHOR="$(git log -1 --pretty=format:'%an')"
          MESSAGE="$(git log -1 --pretty=%B)"
          if [[ "$AUTHOR" == "FluxCD Bot" ]] || [[ "$MESSAGE" == "Update image to*" ]]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
            echo "Commit is from FluxCD Bot or is a Flux image update. Skipping build."
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
      - name: Check Harbor Secret
        id: check_harbor_secret
        run: |
          if [ -z "${{ secrets.HARBOR_SECRET }}" ]; then
            echo "::error::HARBOR_SECRET is not set.\nTo set it:"
            echo "1. Go to your repository on GitHub."
            echo "2. Click on 'Settings' > 'Secrets and variables' > 'Actions'."
            echo "3. Click 'New repository secret'."
            echo "4. Name it HARBOR_SECRET and paste your Harbor password or token as the value."
            echo "5. Save the secret."
            echo "harbor_secret_set=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "HARBOR_SECRET is set."
            echo "harbor_secret_set=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: precheck
    if: needs.precheck.outputs.should_skip != 'true' && needs.precheck.outputs.harbor_secret_set == 'true'
    runs-on: self-hosted
    env:
      IMAGE_NAME: harbor.local/example-self-hosted-saas-app/example-self-hosted-saas-app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout tag if provided
        if: github.event.inputs.tag != ''
        run: |
          git checkout ${{ github.event.inputs.tag }}
      - name: Log in to Harbor
        run: echo "${{ secrets.HARBOR_SECRET }}" | docker login https://harbor.local -u admin --password-stdin
      - name: Get and increment latest tag
        id: semver
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            NEW_TAG="${{ github.event.inputs.tag }}"
            echo "Using provided tag: $NEW_TAG"
          else
            LATEST_TAG=$(git tag --list --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            if [ -z "$LATEST_TAG" ]; then
              NEW_TAG="v1.0.0"
            else
              # Remove 'v' prefix for parsing
              LATEST_TAG_NUMERIC=${LATEST_TAG#v}
              IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG_NUMERIC"
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            fi
            echo "Latest tag: $LATEST_TAG"
            echo "New tag: $NEW_TAG"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${NEW_TAG} .
          docker tag $IMAGE_NAME:${NEW_TAG} $IMAGE_NAME:latest
      - name: Push Docker image (new tag)
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: docker push $IMAGE_NAME:${NEW_TAG}
      - name: Push Docker image (latest)
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: docker push $IMAGE_NAME:latest
      - name: Install kubectl
        run: |
          KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          echo "Installing kubectl version: ${KUBECTL_VERSION}"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Run example kubectl command if you don't want to use flux
        run: kubectl get pods -n example-self-hosted-saas-app
      - name: Create and push new git tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG